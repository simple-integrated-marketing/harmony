@import "./utilities/map";
@import "./utilities/strip-unit";
@import "./utilities/highlight-helper";

// =============================================================================
// Grid
// =============================================================================

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid(
    $nested: false
) {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: stretch;
    
    @if($nested) {
        @if(is-valid-property-map($gutters)) {
            @include fluid-property-map(
                $property: "margin-left",
                $values: $gutters,
                $multiplier: -0.5
            );
            @include fluid-property-map(
                $property: "margin-right",
                $values: $gutters,
                $multiplier: -0.5
            );
        }
    } @else {
        @if(is-valid-property-map($grid-padding-left)) {
            @include fluid-property-map(
                $property: "padding-left",
                $values: $grid-padding-left
            );
        }

        @if(is-valid-property-map($grid-padding-right)) {
            @include fluid-property-map(
                $property: "padding-right",
                $values: $grid-padding-left
            );
        }
    }
    
    @if($nested) {
        @include highlight-helper('Nested Grid', $colour-nested-grids, '.show-containers');
    } @else {
        @include highlight-helper('Grid', $colour-grids, '.show-containers');
    }
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-column(
    $width: none,
    $margin-left: none,
    $margin-right: none,
    $spill-direction: none,
    $gutter-left: 0.5,
    $gutter-right: 0.5,
    $gutter-top: 0,
    $gutter-bottom: 0
) {
    position: relative;
    min-width: 0;

    // Width
    @if($width != none) {
        @include grid-column-width($width);
    }

    // Horizontal gutters
    @if(is-valid-property-map($gutters)) {
        @include grid-column-gutters($gutter-left: $gutter-left, $gutter-right: $gutter-right, $gutter-top: $gutter-top, $gutter-bottom: $gutter-bottom);
    }

    // Spill
    @if $spill-direction != none {
        @include grid-column-spill($spill-direction);
    }
    
    // Margin left
    @if ($margin-left != none) {
        @include grid-column-margin(left, $margin-left);
    }

    // Margin right
    @if ($margin-right != none) {
        @include grid-column-margin(right, $margin-right);
    }

    @include highlight-helper('grid-column', $colour-columns, '.show-columns');

    & > * {
        position: relative;
        @include highlight-helper('grid-column > *', $colour-blocks, '.show-block-children');
    }
}

@mixin grid-column-width($width: none) {
    @if(is-valid-property-map($width)) {
        $width: map-strip-unit($width);
        $width: map-percentage($width);
        @include property-map('width', $width);
    } @else if type-of($width) == "number" {
        width: percentage($width);
    } @else {
        @error("$width must be either a number or a valid property map.");
    }
}

@mixin grid-column-gutters($gutter-left: 0.5, $gutter-right: 0.5, $gutter-top: 0, $gutter-bottom: 0) {
    @if($gutter-top != 0) {
        @include fluid-property-map($property: padding-top, $values: $gutters, $multiplier: $gutter-top);
    }

    @if($gutter-bottom != 0) {
        @include fluid-property-map($property: padding-bottom, $values: $gutters, $multiplier: $gutter-bottom);
    }

    @if($gutter-left != 0) {
        @include fluid-property-map($property: padding-left, $values: $gutters, $multiplier: $gutter-left);
    }

    @if($gutter-right != 0) {
        @include fluid-property-map($property: padding-right, $values: $gutters, $multiplier: $gutter-right);
    }
}

@mixin grid-column-margin($side, $width) {
    @if(is-valid-property-map($width)) {
        $width: map-strip-unit($width);
        $width: map-percentage($width);
        @include property-map('margin-#{$side}', $width);
    } @else if type-of($width) == "number" {
        margin-#{$side}: percentage($width);
    } @else {
        @debug('Column margin width must be a map or a number.');
    }
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-column-spill($direction) {
    @if ($direction != left and $direction != right and $direction != none) {
        @error('Invalid spill direction value: #{$direction}');
    }

    @if $direction == left and not is-valid-property-map($grid-padding-left) {
        @error('$grid-padding-left must be set in order to spill a column to the left.');
    }

    @if $direction == right and not is-valid-property-map($grid-padding-right) {
        @error('$grid-padding-right must be set in order to spill a column to the right.');
    }

    $opposite: get-opposite-direction($direction);
    $padding: if($direction == left, $grid-padding-left, $grid-padding-right);
    $distance: $padding;

    @if($direction != none) {
        @include fluid-property-map(
            $property: #{$direction},
            $values: $distance,
            $multiplier: -1
        );
    
        > * {
            @include fluid-property-map(
                "margin-#{$opposite}",
                $values: $distance,
                $multiplier: -1
            );
        }
    } @else {
        #{$direction}: 0;
        margin-#{$opposite}: 0;
    }
}

@function get-opposite-direction($direction) {
    @if($direction == left) {
        @return right;
    } @else if($direction == right) {
        @return left;
    } @else if($direction == top) {
        @return bottom;
    } @else if($direction == bottom) {
        @return top;
    } @else {
        @error('Invalid direction: #{$direction}');
    }
}

@mixin grid-column-spill-reverse($direction) {
    @if ($direction != left and $direction != right) {
        @error('Invalid spill direction value: #{$direction}');
    }

    $distance: if($direction == left, $grid-padding-left, $grid-padding-right);
 
    @if($direction == left) {
        @include fluid-property-map('padding-left', $distance);
    } @else if($direction == right) {
        @include fluid-property-map('padding-right', $distance);
    }
}

@mixin grid-overlay {
    @include grid;

    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;

    visibility: hidden;

    width: 100%; // Prevents collapse when flex parent

    html.show-grid & {
        visibility: visible;
    }

    .show-containers &:after {
        display: none;
    }
    
    &__column {
        @include grid-column(
            $width: 1 / $overlay-columns
        );
    }

    &__column:before {
        display: block;
        position: absolute;
        content: '';
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        // width: 1px;
        // background-color: $colour-column-overlay;
        border: 0.5px solid $colour-column-overlay;
    }

    // &__column:nth-child(#{$overlay-columns}):after {
    //     display: block;
    //     position: absolute;
    //     content: '';
    //     top: 0;
    //     right: -0.5px;
    //     bottom: 0;
    //     width: 1px;
    //     background-color: $colour-column-overlay;
    // }

    &__column {
        .show-block-children & > *:after,
        .show-columns &:after {
            display: none !important;
        }
    }

    &__column > div {
        display: block;
        content: "";
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        height: 100vh;
        background-color: $colour-column-overlay;
    }

    &__column:nth-child(n + $overlay-columns) {
        display: none;
    }
}

@mixin grid-column-to-property($property, $width) {
    $widths: ();

    @each $key, $left-value in $grid-padding-left {
        $right-value: map-get($grid-padding-right, $key);
        $breakpoint: map-get($breakpoints, $key);
        $calculated-width: ($breakpoint - $left-value - $right-value) * $width;

        $widths: map-merge($widths, ($key: $calculated-width));
    }

    @include fluid-property-map($property, $widths);
}

// Validate variables

@if(not map-keys-correspond-to-keys-in-other-map($grid-padding-left, $breakpoints)) {
    @error('The breakpoints in $grid-padding-left do not all correspond to breakpoints in $breakpoints.');
}

@if(not map-keys-correspond-to-keys-in-other-map($grid-padding-right, $breakpoints)) {
    @error('The breakpoints in $grid-padding-right do not all correspond to breakpoints in $breakpoints.');
}

@if(not maps-have-same-keys($grid-padding-left, $grid-padding-right)) {
    @error('The breakpoint IDs in $grid-padding-left and $grid-padding-right do not match.');
}

@if(is-valid-property-map($grid-padding-left) and is-valid-property-map($gutters) and not maps-have-same-keys($grid-padding-left, $gutters)) {
    @error('The breakpoint IDs in $grid-padding-left and $gutters do not match.');
}
