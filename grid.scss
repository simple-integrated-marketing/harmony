@import "./utilities/validators";
@import "./utilities/map-operators";
@import "./utilities/strip-unit";

// =============================================================================
// Grid
// =============================================================================

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-container(
    $default-column-width: null,
    $horizontal-gutters: $horizontal-gutters,
    $vertical-gutters: $vertical-gutters
) {
    width: 100%; // Prevents collapse when flex parent
    position: relative;
    
    @if (map-is-valid($container-padding-left)) {
        @include fluid-property-map(
            $property: "padding-left",
            $values: $container-padding-left
        );
    }

    @if (map-is-valid($container-padding-right)) {
        @include fluid-property-map(
            $property: "padding-right",
            $values: $container-padding-right
        );
    }

    @if (map-is-valid($container-padding-top)) {
        @include fluid-property-map(
            $property: "padding-top",
            $values: $container-padding-top
        );
    }

    @if (map-is-valid($container-padding-bottom)) {
        @include fluid-property-map(
            $property: "padding-bottom",
            $values: $container-padding-bottom
        );
    }

    &__row {
        @include grid-row(
            $vertical-gutters: $vertical-gutters,
            $horizontal-gutters: $horizontal-gutters,
            $default-column-width: $default-column-width
        );
    }

    @if ($default-column-width != null) {
        &__column {
            @include grid-column(
                $width: $default-column-width,
                $horizontal-gutters: $horizontal-gutters,
                $vertical-gutters: $vertical-gutters
            );
        }
    }
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-row(
    $default-column-width: null,
    $vertical-gutters: $vertical-gutters,
    $horizontal-gutters: $horizontal-gutters,
    $nested: false
) {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-wrap: wrap;
    flex-shrink: 1;
    
    @if(map-is-valid($vertical-gutters)) {
        @include grid-gutter($side: top, $multiplier: -1);
    }

    @if($nested and map-is-valid($horizontal-gutters)) {
        @include grid-gutter($side: left, $multiplier: -0.5);
        @include grid-gutter($side: right, $multiplier: -0.5);
    }
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-column(
    $width: null,
    $horizontal-gutters: $horizontal-gutters,
    $vertical-gutters: $vertical-gutters,
    $gutter-left: 0.5,
    $gutter-right: 0.5,
    $gutter-top: 1,
    $gutter-bottom: 0,
    $spill-right: false,
    $spill-left: false,
    $margin-left: null,
    $margin-right: null
) {
    position: relative;
    min-width: 0;

    @if ($width != null) {
        width: percentage($width);
    }

    @if (map-is-valid($horizontal-gutters)) {
        @include grid-gutter(
            $side: left,
            $multiplier: $gutter-left
        );
        @include grid-gutter(
            $side: right,
            $multiplier: $gutter-right
        );
    }

    @if (map-is-valid($vertical-gutters)) {
        @include grid-gutter(
            $side: top,
            $multiplier: $gutter-top
        );
        @include grid-gutter(
            $side: bottom,
            $multiplier: $gutter-bottom
        );
    }

    @if ($spill-left and map-is-valid($container-padding-left)) {
        @include grid-column-spill(
            $direction: left,
            $distance: $container-padding-left
        );
    }

    @if ($spill-right and map-is-valid($container-padding-right)) {
        @include grid-column-spill(
            $direction: right,
            $distance: $container-padding-right
        );
    }

    @if ($margin-left != null) {
        margin-left: percentage($margin-left);
    }

    @if ($margin-right != null) {
        margin-right: percentage($margin-right);
    }

    .show-block-children & > * {
        box-shadow: inset 0px 0px 0px 4000px $colour-blocks;
    }
}

/*
 * Add a gutter to a chosen size of an element.
 * This forms the core of the mixins below.
 *
 * Usage:
 * @include grid-gutter($side: top, $multiplier: 1);
 */
@mixin grid-gutter($side, $multiplier: 0.5) {
    $values: null;
    
    @if($side == 'left' or $side == 'right') {
        $values: $horizontal-gutters;
    } @elseif($side == 'top' or $side == 'bottom') {
        $values: $vertical-gutters;
    }

    @if (not map-is-valid($values)) {
        @error ('Grid gutters must be a map.');
    }

    $padding-or-margin: if($multiplier < 0, "margin", "padding");

    $property: "#{$padding-or-margin}-#{$side}";

    $values: map-multiply($values, 0.5);

    @include fluid-property-map(
        $property: $property,
        $values: $values
    );
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin grid-column-spill($direction, $distance: null, $gutter: null) {
    $opposite: null;

    @if $direction == left {
        $opposite: right;
    } @else if $direction == right {
        $opposite: left;
    } @else if $direction == top {
        $opposite: bottom;
    } @else if $direction == bottom {
        $opposite: top;
    } @else {
        @error ('Direction must be left, right, top or bottom.');
    }

    // TODO if container-padding-left doesn't have same ids as container-padding-right, throw error

    position: relative;

    @include fluid-property-map(
        $property: #{$direction},
        $values: $distance,
        $multiplier: -1
    );

    > * {
        @include fluid-property-map(
            "margin-#{$opposite}",
            $values: $distance,
            $multiplier: -1
        );
    }
}

@mixin grid-overlay {
    @include grid-container($default-column-width: $overlay-column-width);

    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;

    display: block;
    visibility: hidden;
    margin-top: 0;

    html.show-grid & {
        visibility: visible;
    }

    &__row {
        height: 100vh;
        margin-top: 0;
    }

    &__column:first-child {
        border-left: 1px solid $colour-columns;
    }

    &__column {
        padding-top: 0;
        border-right: 1px solid $colour-columns;
    }

    &__column:after {
        display: block;
        content: "";
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        height: 100vh;
        background-color: $colour-columns;

        @if (not map-is-valid($horizontal-gutters)) {
            border-right: 1px solid $colour-columns;
        }
    }
}

@mixin grid-column-to-property($property, $width) {
    $widths: ();

    @each $key, $left-value in $container-padding-left {
        $right-value: map-get($container-padding-right, $key);
        $breakpoint: map-get($breakpoints, $key);
        $calculated-width: ($breakpoint - $left-value - $right-value) * $width;

        $widths: map-merge($widths, ($key: $calculated-width));
    }

    @include fluid-property-map($property, $widths);
}

// Check variables

@if(not map-corresponds-to-keys-in-other-map($container-padding-left, $breakpoints)) {
    @error('The breakpoint \'#{$key}\' exists in $container-padding-left, but not in $breakpoints.');
}

@if(not map-corresponds-to-keys-in-other-map($container-padding-right, $breakpoints)) {
    @error('The breakpoint \'#{$key}\' exists in $container-padding-right, but not in $breakpoints.');
}

@if(not maps-have-same-keys($container-padding-left, $container-padding-right)) {
    @error('The breakpoint IDs in $container-padding-left and $container-padding-left do not match.');
}