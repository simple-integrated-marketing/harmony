// =============================================================================
// Fluid Property
// =============================================================================

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */

@mixin fluid-property(
    $property,
    $min-value,
    $max-value,
    $min-breakpoint,
    $max-breakpoint,
    $applyBelow: true,
    $applyAbove: true,
    $size: 1
) {
    @if (not unitless($min-breakpoint)) {
        @error '$min-breakpoint must be unitless.';
    }

    @if (not unitless($max-breakpoint)) {
        @error '$max-breakpoint must be unitless.';
    }

    $difference: ($max-value - $min-value) / ($max-breakpoint - $min-breakpoint) * 100vw;
    $adder: ($min-value * $max-breakpoint - $max-value * $min-breakpoint) / ($max-breakpoint - $min-breakpoint) + 0px;
    $min-breakpoint: $min-breakpoint + 0px;
    $max-breakpoint: $max-breakpoint + 0px;
    $min-value: $min-value + 0px;
    $max-value: $max-value + 0px;

    // If $applyBelow is true, the lower value will also apply below the $min-breakpoint breakpoint.
    @if $applyBelow {
        @media (max-width: #{$min-breakpoint}) {
            #{$property}: calc(#{$min-value} * #{$size});
        }
    }

    // If $applyAbove is true, the higher value will also apply above the $max-breakpoint breakpoint.
    @if $applyAbove {
        @media (min-width: #{$max-breakpoint}) {
            #{$property}: calc(#{$max-value} * #{$size});
        }
    }

    // Apply the tween calculation from the $min-breakpoint to $max-breakpoint breakpoints.
    @media (min-width: #{$min-breakpoint}) and (max-width: #{$max-breakpoint}) {
        #{$property}: calc((#{$difference} + #{$adder}) * #{$size});
    }
}

// =============================================================================
// Responsive helpers
// =============================================================================

/**
 * Fluid Property Helper
 * Article: https://bit.ly/2MaHaXb

 * Basic font scale:
 * .component { @include fp(font-size, 12, 24); }
 *
 * Width scale with custom breakpoint min/max:
 * .component { @include fp(width, 12, 24, $small, $medium); }
 *
 * Or define a non-linear scale:
 * .component {
 *   @include fp(font-size, 10, 200, $small, $medium, $remove-end: true);
 *   @include fp(font-size, 20, 300, $medium, $large, $remove-start: true, $remove-end: true);
 *   @include fp(font-size, 30, 400, $large, $max, $remove-start: true);
 * }
 */
 @mixin fp($property, $min-value, $max-value, $start-breakpoint: $small, $end-breakpoint: $max, $source-unit: vw, $output-unit: px, $remove-start: false, $remove-end: false, $size: 1) {

	$min-value: strip-unit($min-value);
	$max-value: strip-unit($max-value);
	$start-breakpoint: strip-unit($start-breakpoint);
	$end-breakpoint: strip-unit($end-breakpoint);

	$multiplier: ($max-value - $min-value) / ($end-breakpoint - $start-breakpoint) * 100;
	$adder: ($min-value * $end-breakpoint - $max-value * $start-breakpoint) / ($end-breakpoint - $start-breakpoint);

    $formula: calc((#{$multiplier + $source-unit} + #{$adder + 0+$output-unit}) * #{$size});

	// Start
	// Capped from just before $start-breakpoint
	// Fluid from $start-breakpoint to just before $end-breakpoint
	@if ($remove-end) and not ($remove-start) {
		@media (max-width: #{$start-breakpoint - 1px}) {
            #{$property}: (#{$min-value} + 0#{$output-unit}) * #{$size};
		}
		@media (min-width: #{$start-breakpoint + 0px}) and (max-width: #{$end-breakpoint - 1px}) {
			#{$property}: $formula;
		}

	// Middle stretch
	// Fluid from $start-breakpoint to just before $end-breakpoint
	} @else if ($remove-start) and ($remove-end) {
		@media (min-width: #{$start-breakpoint + 0px}) and (max-width: #{$end-breakpoint - 1px}) {
			#{$property}: $formula;
		}

	// End
	// Fluid from $start-breakpoint to just before $end-breakpoint
	// Capped from $end-breakpoint
	} @else if ($remove-start) and not ($remove-end) {
		@media (min-width: #{$start-breakpoint + 0px}) and (max-width: #{$end-breakpoint - 1px}) {
			#{$property}: $formula;
		}
		@media (min-width: #{$end-breakpoint + 0px}) {
            #{$property}: (#{$max-value} + 0#{$output-unit}) * #{$size};
		}

	// Full stretch
	// Capped from just before $start-breakpoint
	// Fluid from $start-breakpoint to just before $end-breakpoint
	// Capped from $end-breakpoint
	} @else {
		@media (max-width: #{$start-breakpoint - 1px}) {
			#{$property}: $min-value + 0#{$output-unit};
		}
		@media (min-width: #{$start-breakpoint + 0px}) and (max-width: #{$end-breakpoint - 1px}) {
			#{$property}: $formula;
		}
		@media (min-width: #{$end-breakpoint + 0px}) {
			#{$property}: $max-value + 0#{$output-unit};
		}
	}
}

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */
@mixin fluid-property-map(
    $property: null,
    $values: null,
    $size: 1,
    $breakpoints: $breakpoints
) {
    $selected-breakpoint-ids: map-keys($values);
    $selected-breakpoint-values: map-values($values);

    @if ($property == null) {
        @error 'Property must be specified.';
    }

    @if ($values == null) {
        @error 'Value must be specified.';
    }

    @for $i from 1 through length($selected-breakpoint-ids) - 1 {
        $is-last: $i == length($selected-breakpoint-ids) - 1;
        $is-first: $i == 1;

        $min-value: strip-unit(nth($selected-breakpoint-values, $i));
        $max-value: strip-unit(nth($selected-breakpoint-values, $i + 1));

        $min-breakpoint-id: nth($selected-breakpoint-ids, $i);
        $max-breakpoint-id: nth($selected-breakpoint-ids, $i + 1);

        $min-breakpoint: strip-unit(
            map-get($breakpoints, $min-breakpoint-id)
        );
        $max-breakpoint: strip-unit(
            map-get($breakpoints, $max-breakpoint-id)
        );

        @if ($max-breakpoint == null) {
            @error 'The value "#{$max-breakpoint-id}" doesn\'t correspond to a breakpoint defined in $breakpoints.';
        }

        @if ($min-breakpoint == null) {
            @error 'The value "#{$min-breakpoint-id}" doesn\'t correspond to a breakpoint defined in $breakpoints.';
        }

        @include fluid-property(
            $property: $property,
            $min-value: $min-value,
            $max-value: $max-value,
            $min-breakpoint: $min-breakpoint,
            $max-breakpoint: $max-breakpoint,
            $applyAbove: $is-last,
            $applyBelow: $is-first,
            $size: $size
        );

        // @include fp($property: $property, $min-value: $min-value, $max-value: $max-value, $start-breakpoint: $min-breakpoint, $end-breakpoint: $max-breakpoint, $remove-start: not $is-first, $remove-end: not $is-last, $size: $size);
    }
}
