@import "./map";

// =============================================================================
// Fluid Property
// =============================================================================

/*
 * Short description goes here.
 *
 * Usage:
 * @include ...
 */

@mixin fluid-property(
    $property,
    $min-value,
    $max-value,
    $min-breakpoint,
    $max-breakpoint,
    $applyBelow: true,
    $applyAbove: true,
    $multiplier: 1
) {
    @if (not unitless($min-breakpoint)) {
        @error '$min-breakpoint must be unitless.';
    }

    @if (not unitless($max-breakpoint)) {
        @error '$max-breakpoint must be unitless.';
    }

    $difference: ($max-value - $min-value) / ($max-breakpoint - $min-breakpoint) * 100vw;
    $adder: ($min-value * $max-breakpoint - $max-value * $min-breakpoint) / ($max-breakpoint - $min-breakpoint) + 0px;
    $min-breakpoint: $min-breakpoint + 0px;
    $max-breakpoint: $max-breakpoint + 0px;
    $min-value: $min-value + 0px;
    $max-value: $max-value + 0px;

    // If $applyBelow is true, the lower value will also apply below the $min-breakpoint breakpoint.
    @if $applyBelow {
        @media (max-width: #{$min-breakpoint}) {
            #{$property}: calc(#{$min-value} * #{$multiplier});
        }
    }

    // If $applyAbove is true, the higher value will also apply above the $max-breakpoint breakpoint.
    @if $applyAbove {
        @media (min-width: #{$max-breakpoint - 1}) {
            #{$property}: calc(#{$max-value} * #{$multiplier});
        }
    }

    // Apply the tween calculation from the $min-breakpoint to $max-breakpoint breakpoints.
    @media (min-width: #{$min-breakpoint}) and (max-width: #{$max-breakpoint - 1}) {
        #{$property}: calc((#{$difference} + #{$adder}) * #{$multiplier});
    }
}